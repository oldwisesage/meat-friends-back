datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      Int        @id @default(autoincrement())
  name                    String?
  email                   String?    @unique
  password                String?
  cart                    CartItem[] @relation("CartItem_user")
  orders                  Order[]    @relation("Order_user")
  address                 Address[]  @relation("Address_user")
  created                 DateTime?
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
}

model Cut {
  id                Int        @id @default(autoincrement())
  name              String?
  description       String?
  status            String?
  price             Int?
  animal            Animal?    @relation("Cut_animal", fields: [animalId], references: [id])
  animalId          Int?       @map("animal")
  photo             CutImage?  @relation("Cut_photo", fields: [photoId], references: [id])
  photoId           Int?       @unique @map("photo")
  from_CartItem_cut CartItem[] @relation("CartItem_cut")

  @@index([animalId])
}

model CutImage {
  id                   Int         @id @default(autoincrement())
  image                Json?
  altText              String?
  cut                  Cut?        @relation("Cut_photo")
  from_OrderItem_photo OrderItem[] @relation("OrderItem_photo")
}

model CartItem {
  id       Int   @id @default(autoincrement())
  quantity Int?
  cut      Cut?  @relation("CartItem_cut", fields: [cutId], references: [id])
  cutId    Int?  @map("cut")
  user     User? @relation("CartItem_user", fields: [userId], references: [id])
  userId   Int?  @map("user")

  @@index([cutId])
  @@index([userId])
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  photo       CutImage? @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId     Int?      @map("photo")
  price       Int?
  quantity    Int?
  order       Order?    @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     Int?      @map("order")

  @@index([photoId])
  @@index([orderId])
}

model Order {
  id      Int         @id @default(autoincrement())
  total   Int?
  items   OrderItem[] @relation("OrderItem_order")
  user    User?       @relation("Order_user", fields: [userId], references: [id])
  userId  Int?        @map("user")
  charge  String?
  created DateTime?

  @@index([userId])
}

model Address {
  id          Int       @id @default(autoincrement())
  type        String?
  streetNum   String?
  street      String?
  city        String?
  state       String?
  zip         String?
  dateCreated DateTime?
  user        User?     @relation("Address_user", fields: [userId], references: [id])
  userId      Int?      @map("user")

  @@index([userId])
}

model Farm {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  city        String?
  state       String?
  dateCreated DateTime?
  animals     Animal[]  @relation("Animal_farm")
}

model Animal {
  id          Int       @id @default(autoincrement())
  type        String?
  description String?
  dateCreated DateTime?
  farm        Farm?     @relation("Animal_farm", fields: [farmId], references: [id])
  farmId      Int?      @map("farm")
  cuts        Cut[]     @relation("Cut_animal")

  @@index([farmId])
}