datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      Int        @id @default(autoincrement())
  name                    String?
  email                   String?    @unique
  password                String?
  cart                    CartItem[] @relation("CartItem_user")
  orders                  Order[]    @relation("Order_user")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
}

model Cut {
  id                Int        @id @default(autoincrement())
  name              String?
  description       String?
  photo             CutImage?  @relation("Cut_photo", fields: [photoId], references: [id])
  photoId           Int?       @unique @map("photo")
  status            String?
  price             Int?
  from_CartItem_cut CartItem[] @relation("CartItem_cut")
}

model CutImage {
  id                   Int         @id @default(autoincrement())
  image                Json?
  altText              String?
  cut                  Cut?        @relation("Cut_photo")
  from_OrderItem_photo OrderItem[] @relation("OrderItem_photo")
}

model CartItem {
  id       Int   @id @default(autoincrement())
  quantity Int?
  cut      Cut?  @relation("CartItem_cut", fields: [cutId], references: [id])
  cutId    Int?  @map("cut")
  user     User? @relation("CartItem_user", fields: [userId], references: [id])
  userId   Int?  @map("user")

  @@index([cutId])
  @@index([userId])
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  photo       CutImage? @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId     Int?      @map("photo")
  price       Int?
  quantity    Int?
  order       Order?    @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     Int?      @map("order")

  @@index([photoId])
  @@index([orderId])
}

model Order {
  id     Int         @id @default(autoincrement())
  total  Int?
  items  OrderItem[] @relation("OrderItem_order")
  user   User?       @relation("Order_user", fields: [userId], references: [id])
  userId Int?        @map("user")
  charge String?

  @@index([userId])
}