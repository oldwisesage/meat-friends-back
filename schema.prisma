datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Address {
  id        Int       @id @default(autoincrement())
  user      User?     @relation("Address_user", fields: [userId], references: [id])
  userId    Int?      @map("user")
  street    String?
  city      String?
  state     String?
  zip       String?
  createdAt DateTime?

  @@index([userId])
}

model Animal {
  id              Int       @id @default(autoincrement())
  farm            Farm?     @relation("Animal_farm", fields: [farmId], references: [id])
  farmId          Int?      @map("farm")
  cuts            Cut[]     @relation("Cut_animal")
  breed           Breed?    @relation("Animal_breed", fields: [breedId], references: [id])
  breedId         Int?      @unique @map("breed")
  description     String?
  hangWeight      Int?
  processedWeight Int?
  sellableWeight  Int?
  wasteWeight     Int?
  createdAt       DateTime?
  processedAt     DateTime?
  availableAt     DateTime?

  @@index([farmId])
}

model Breed {
  id     Int     @id @default(autoincrement())
  animal Animal? @relation("Animal_breed")
  name   String?
  bred   String?
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cut       Cut?      @relation("CartItem_cut", fields: [cutId], references: [id])
  cutId     Int?      @map("cut")
  user      User?     @relation("CartItem_user", fields: [userId], references: [id])
  userId    Int?      @map("user")
  quantity  Int?
  createdAt DateTime?

  @@index([cutId])
  @@index([userId])
}

model Cut {
  id                Int        @id @default(autoincrement())
  animal            Animal?    @relation("Cut_animal", fields: [animalId], references: [id])
  animalId          Int?       @map("animal")
  photo             CutImage?  @relation("Cut_photo", fields: [photoId], references: [id])
  photoId           Int?       @unique @map("photo")
  name              String?
  description       String?
  status            String?
  price             Int?
  weight            Int?
  from_CartItem_cut CartItem[] @relation("CartItem_cut")

  @@index([animalId])
}

model CutImage {
  id                   Int         @id @default(autoincrement())
  cut                  Cut?        @relation("Cut_photo")
  image                Json?
  altText              String?
  from_OrderItem_photo OrderItem[] @relation("OrderItem_photo")
}

model Farm {
  id          Int       @id @default(autoincrement())
  animals     Animal[]  @relation("Animal_farm")
  name        String?
  location    String?
  description String?
  createdAt   DateTime?
}

model Order {
  id          Int         @id @default(autoincrement())
  items       OrderItem[] @relation("OrderItem_order")
  user        User?       @relation("Order_user", fields: [userId], references: [id])
  userId      Int?        @map("user")
  total       Int?
  charge      String?
  createdAt   DateTime?
  confirmedAt DateTime?
  filledAt    DateTime?
  shippedAt   DateTime?
  deliveredAt DateTime?

  @@index([userId])
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  order       Order?    @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     Int?      @map("order")
  photo       CutImage? @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId     Int?      @map("photo")
  name        String?
  price       Int?
  quantity    Int?
  description String?
  createdAt   DateTime?

  @@index([orderId])
  @@index([photoId])
}

model Setting {
  id        Int     @id @default(autoincrement())
  user      User?   @relation("Setting_user", fields: [userId], references: [id])
  userId    Int?    @unique @map("user")
  darkmode  String?
  animation String?
  textsize  String?
}

model User {
  id                      Int        @id @default(autoincrement())
  orders                  Order[]    @relation("Order_user")
  cart                    CartItem[] @relation("CartItem_user")
  address                 Address[]  @relation("Address_user")
  setting                 Setting?   @relation("Setting_user")
  name                    String?
  lastName                String?
  email                   String?    @unique
  password                String?
  stripePay               String?
  createdAt               DateTime?
  lastVisitAt             DateTime?
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
}